// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TripodSchema.proto

#ifndef PROTOBUF_TripodSchema_2eproto__INCLUDED
#define PROTOBUF_TripodSchema_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace renren {
namespace tripod {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TripodSchema_2eproto();
void protobuf_AssignDesc_TripodSchema_2eproto();
void protobuf_ShutdownFile_TripodSchema_2eproto();

class ClusterInfo;
class NodeInfo;
class NodeStatus;

enum NodeCategoryEnum {
  META = 0,
  READ = 1,
  WRITE = 2,
  LOAD = 3
};
bool NodeCategoryEnum_IsValid(int value);
const NodeCategoryEnum NodeCategoryEnum_MIN = META;
const NodeCategoryEnum NodeCategoryEnum_MAX = LOAD;
const int NodeCategoryEnum_ARRAYSIZE = NodeCategoryEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeCategoryEnum_descriptor();
inline const ::std::string& NodeCategoryEnum_Name(NodeCategoryEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeCategoryEnum_descriptor(), value);
}
inline bool NodeCategoryEnum_Parse(
    const ::std::string& name, NodeCategoryEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeCategoryEnum>(
    NodeCategoryEnum_descriptor(), name, value);
}
enum NodeTypeEnum {
  DUMMY = 0,
  MEMCACHED = 1,
  ICE = 2
};
bool NodeTypeEnum_IsValid(int value);
const NodeTypeEnum NodeTypeEnum_MIN = DUMMY;
const NodeTypeEnum NodeTypeEnum_MAX = ICE;
const int NodeTypeEnum_ARRAYSIZE = NodeTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeTypeEnum_descriptor();
inline const ::std::string& NodeTypeEnum_Name(NodeTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeTypeEnum_descriptor(), value);
}
inline bool NodeTypeEnum_Parse(
    const ::std::string& name, NodeTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeTypeEnum>(
    NodeTypeEnum_descriptor(), name, value);
}
enum NodeStatusEnum {
  OFFLINE = 0,
  UPGRADING = 1,
  ONLINE = 2
};
bool NodeStatusEnum_IsValid(int value);
const NodeStatusEnum NodeStatusEnum_MIN = OFFLINE;
const NodeStatusEnum NodeStatusEnum_MAX = ONLINE;
const int NodeStatusEnum_ARRAYSIZE = NodeStatusEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeStatusEnum_descriptor();
inline const ::std::string& NodeStatusEnum_Name(NodeStatusEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeStatusEnum_descriptor(), value);
}
inline bool NodeStatusEnum_Parse(
    const ::std::string& name, NodeStatusEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeStatusEnum>(
    NodeStatusEnum_descriptor(), name, value);
}
// ===================================================================

class ClusterInfo : public ::google::protobuf::Message {
 public:
  ClusterInfo();
  virtual ~ClusterInfo();
  
  ClusterInfo(const ClusterInfo& from);
  
  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterInfo& default_instance();
  
  void Swap(ClusterInfo* other);
  
  // implements Message ----------------------------------------------
  
  ClusterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 blocksize = 1;
  inline bool has_blocksize() const;
  inline void clear_blocksize();
  static const int kBlocksizeFieldNumber = 1;
  inline ::google::protobuf::int32 blocksize() const;
  inline void set_blocksize(::google::protobuf::int32 value);
  
  // required int32 replica = 2;
  inline bool has_replica() const;
  inline void clear_replica();
  static const int kReplicaFieldNumber = 2;
  inline ::google::protobuf::int32 replica() const;
  inline void set_replica(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.renren.tripod.ClusterInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 blocksize_;
  ::google::protobuf::int32 replica_;
  friend void  protobuf_AddDesc_TripodSchema_2eproto();
  friend void protobuf_AssignDesc_TripodSchema_2eproto();
  friend void protobuf_ShutdownFile_TripodSchema_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ClusterInfo* default_instance_;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message {
 public:
  NodeInfo();
  virtual ~NodeInfo();
  
  NodeInfo(const NodeInfo& from);
  
  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();
  
  void Swap(NodeInfo* other);
  
  // implements Message ----------------------------------------------
  
  NodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .com.renren.tripod.NodeCategoryEnum category = 1;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 1;
  inline com::renren::tripod::NodeCategoryEnum category() const;
  inline void set_category(com::renren::tripod::NodeCategoryEnum value);
  
  // required .com.renren.tripod.NodeTypeEnum type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline com::renren::tripod::NodeTypeEnum type() const;
  inline void set_type(com::renren::tripod::NodeTypeEnum value);
  
  // required string config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const char* value, size_t size);
  inline ::std::string* mutable_config();
  
  // @@protoc_insertion_point(class_scope:com.renren.tripod.NodeInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int category_;
  int type_;
  ::std::string* config_;
  static const ::std::string _default_config_;
  friend void  protobuf_AddDesc_TripodSchema_2eproto();
  friend void protobuf_AssignDesc_TripodSchema_2eproto();
  friend void protobuf_ShutdownFile_TripodSchema_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class NodeStatus : public ::google::protobuf::Message {
 public:
  NodeStatus();
  virtual ~NodeStatus();
  
  NodeStatus(const NodeStatus& from);
  
  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStatus& default_instance();
  
  void Swap(NodeStatus* other);
  
  // implements Message ----------------------------------------------
  
  NodeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeStatus& from);
  void MergeFrom(const NodeStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .com.renren.tripod.NodeStatusEnum status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline com::renren::tripod::NodeStatusEnum status() const;
  inline void set_status(com::renren::tripod::NodeStatusEnum value);
  
  // @@protoc_insertion_point(class_scope:com.renren.tripod.NodeStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int status_;
  friend void  protobuf_AddDesc_TripodSchema_2eproto();
  friend void protobuf_AssignDesc_TripodSchema_2eproto();
  friend void protobuf_ShutdownFile_TripodSchema_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodeStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// ClusterInfo

// required int32 blocksize = 1;
inline bool ClusterInfo::has_blocksize() const {
  return _has_bit(0);
}
inline void ClusterInfo::clear_blocksize() {
  blocksize_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ClusterInfo::blocksize() const {
  return blocksize_;
}
inline void ClusterInfo::set_blocksize(::google::protobuf::int32 value) {
  _set_bit(0);
  blocksize_ = value;
}

// required int32 replica = 2;
inline bool ClusterInfo::has_replica() const {
  return _has_bit(1);
}
inline void ClusterInfo::clear_replica() {
  replica_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 ClusterInfo::replica() const {
  return replica_;
}
inline void ClusterInfo::set_replica(::google::protobuf::int32 value) {
  _set_bit(1);
  replica_ = value;
}

// -------------------------------------------------------------------

// NodeInfo

// required .com.renren.tripod.NodeCategoryEnum category = 1;
inline bool NodeInfo::has_category() const {
  return _has_bit(0);
}
inline void NodeInfo::clear_category() {
  category_ = 0;
  _clear_bit(0);
}
inline com::renren::tripod::NodeCategoryEnum NodeInfo::category() const {
  return static_cast< com::renren::tripod::NodeCategoryEnum >(category_);
}
inline void NodeInfo::set_category(com::renren::tripod::NodeCategoryEnum value) {
  GOOGLE_DCHECK(com::renren::tripod::NodeCategoryEnum_IsValid(value));
  _set_bit(0);
  category_ = value;
}

// required .com.renren.tripod.NodeTypeEnum type = 2;
inline bool NodeInfo::has_type() const {
  return _has_bit(1);
}
inline void NodeInfo::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline com::renren::tripod::NodeTypeEnum NodeInfo::type() const {
  return static_cast< com::renren::tripod::NodeTypeEnum >(type_);
}
inline void NodeInfo::set_type(com::renren::tripod::NodeTypeEnum value) {
  GOOGLE_DCHECK(com::renren::tripod::NodeTypeEnum_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// required string config = 3;
inline bool NodeInfo::has_config() const {
  return _has_bit(2);
}
inline void NodeInfo::clear_config() {
  if (config_ != &_default_config_) {
    config_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& NodeInfo::config() const {
  return *config_;
}
inline void NodeInfo::set_config(const ::std::string& value) {
  _set_bit(2);
  if (config_ == &_default_config_) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void NodeInfo::set_config(const char* value) {
  _set_bit(2);
  if (config_ == &_default_config_) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void NodeInfo::set_config(const char* value, size_t size) {
  _set_bit(2);
  if (config_ == &_default_config_) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfo::mutable_config() {
  _set_bit(2);
  if (config_ == &_default_config_) {
    config_ = new ::std::string;
  }
  return config_;
}

// -------------------------------------------------------------------

// NodeStatus

// required .com.renren.tripod.NodeStatusEnum status = 1;
inline bool NodeStatus::has_status() const {
  return _has_bit(0);
}
inline void NodeStatus::clear_status() {
  status_ = 0;
  _clear_bit(0);
}
inline com::renren::tripod::NodeStatusEnum NodeStatus::status() const {
  return static_cast< com::renren::tripod::NodeStatusEnum >(status_);
}
inline void NodeStatus::set_status(com::renren::tripod::NodeStatusEnum value) {
  GOOGLE_DCHECK(com::renren::tripod::NodeStatusEnum_IsValid(value));
  _set_bit(0);
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tripod
}  // namespace renren
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< com::renren::tripod::NodeCategoryEnum>() {
  return com::renren::tripod::NodeCategoryEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< com::renren::tripod::NodeTypeEnum>() {
  return com::renren::tripod::NodeTypeEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< com::renren::tripod::NodeStatusEnum>() {
  return com::renren::tripod::NodeStatusEnum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TripodSchema_2eproto__INCLUDED

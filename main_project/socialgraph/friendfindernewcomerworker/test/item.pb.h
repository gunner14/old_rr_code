// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#ifndef PROTOBUF_item_2eproto__INCLUDED
#define PROTOBUF_item_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace xce {
namespace socialgraph {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_item_2eproto();
void protobuf_AssignDesc_item_2eproto();
void protobuf_ShutdownFile_item_2eproto();

class Item;
class Items;

// ===================================================================

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();
  
  Item(const Item& from);
  
  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();
  
  void Swap(Item* other);
  
  // implements Message ----------------------------------------------
  
  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 field = 2;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 2;
  inline ::google::protobuf::int32 field() const;
  inline void set_field(::google::protobuf::int32 value);
  
  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // repeated int32 fields = 5;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 5;
  inline ::google::protobuf::int32 fields(int index) const;
  inline void set_fields(int index, ::google::protobuf::int32 value);
  inline void add_fields(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fields() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fields();
  
  // repeated string messages = 6;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 6;
  inline const ::std::string& messages(int index) const;
  inline ::std::string* mutable_messages(int index);
  inline void set_messages(int index, const ::std::string& value);
  inline void set_messages(int index, const char* value);
  inline void set_messages(int index, const char* value, size_t size);
  inline ::std::string* add_messages();
  inline void add_messages(const ::std::string& value);
  inline void add_messages(const char* value);
  inline void add_messages(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_messages();
  
  // @@protoc_insertion_point(class_scope:xce.socialgraph.Item)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 field_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> messages_;
  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class Items : public ::google::protobuf::Message {
 public:
  Items();
  virtual ~Items();
  
  Items(const Items& from);
  
  inline Items& operator=(const Items& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Items& default_instance();
  
  void Swap(Items* other);
  
  // implements Message ----------------------------------------------
  
  Items* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Items& from);
  void MergeFrom(const Items& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .xce.socialgraph.Item items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::xce::socialgraph::Item& items(int index) const;
  inline ::xce::socialgraph::Item* mutable_items(int index);
  inline ::xce::socialgraph::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::xce::socialgraph::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::xce::socialgraph::Item >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:xce.socialgraph.Items)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::xce::socialgraph::Item > items_;
  friend void  protobuf_AddDesc_item_2eproto();
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Items* default_instance_;
};
// ===================================================================


// ===================================================================

// Item

// required int32 id = 1;
inline bool Item::has_id() const {
  return _has_bit(0);
}
inline void Item::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Item::id() const {
  return id_;
}
inline void Item::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional int32 field = 2;
inline bool Item::has_field() const {
  return _has_bit(1);
}
inline void Item::clear_field() {
  field_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Item::field() const {
  return field_;
}
inline void Item::set_field(::google::protobuf::int32 value) {
  _set_bit(1);
  field_ = value;
}

// optional string message = 3;
inline bool Item::has_message() const {
  return _has_bit(2);
}
inline void Item::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Item::message() const {
  return *message_;
}
inline void Item::set_message(const ::std::string& value) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Item::set_message(const char* value) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Item::set_message(const char* value, size_t size) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Item::mutable_message() {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// repeated int32 fields = 5;
inline int Item::fields_size() const {
  return fields_.size();
}
inline void Item::clear_fields() {
  fields_.Clear();
}
inline ::google::protobuf::int32 Item::fields(int index) const {
  return fields_.Get(index);
}
inline void Item::set_fields(int index, ::google::protobuf::int32 value) {
  fields_.Set(index, value);
}
inline void Item::add_fields(::google::protobuf::int32 value) {
  fields_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::fields() const {
  return fields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_fields() {
  return &fields_;
}

// repeated string messages = 6;
inline int Item::messages_size() const {
  return messages_.size();
}
inline void Item::clear_messages() {
  messages_.Clear();
}
inline const ::std::string& Item::messages(int index) const {
  return messages_.Get(index);
}
inline ::std::string* Item::mutable_messages(int index) {
  return messages_.Mutable(index);
}
inline void Item::set_messages(int index, const ::std::string& value) {
  messages_.Mutable(index)->assign(value);
}
inline void Item::set_messages(int index, const char* value) {
  messages_.Mutable(index)->assign(value);
}
inline void Item::set_messages(int index, const char* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Item::add_messages() {
  return messages_.Add();
}
inline void Item::add_messages(const ::std::string& value) {
  messages_.Add()->assign(value);
}
inline void Item::add_messages(const char* value) {
  messages_.Add()->assign(value);
}
inline void Item::add_messages(const char* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Item::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Item::mutable_messages() {
  return &messages_;
}

// -------------------------------------------------------------------

// Items

// repeated .xce.socialgraph.Item items = 4;
inline int Items::items_size() const {
  return items_.size();
}
inline void Items::clear_items() {
  items_.Clear();
}
inline const ::xce::socialgraph::Item& Items::items(int index) const {
  return items_.Get(index);
}
inline ::xce::socialgraph::Item* Items::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::xce::socialgraph::Item* Items::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xce::socialgraph::Item >&
Items::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::xce::socialgraph::Item >*
Items::mutable_items() {
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace socialgraph
}  // namespace xce

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_item_2eproto__INCLUDED

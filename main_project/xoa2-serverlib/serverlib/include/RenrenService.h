/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RenrenService_H
#define RenrenService_H

#include <TProcessor.h>
#include "renren_types.h"

namespace xoa2 { namespace base {

class RenrenServiceIf {
 public:
  virtual ~RenrenServiceIf() {}
  virtual void getName(std::string& _return) = 0;
  virtual void getVersion(std::string& _return) = 0;
  virtual int64_t aliveSince() = 0;
  virtual RenrenBaseStatus::type getStatus() = 0;
  virtual void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) = 0;
  virtual void getStatusDetails(std::string& _return) = 0;
  virtual void getCounters(std::map<std::string, int64_t> & _return) = 0;
  virtual int64_t getCounter(const std::string& key) = 0;
  virtual void getMean(std::string& _return, const std::string& methodName) = 0;
  virtual void getMax(std::string& _return, const std::string& methodName, const int32_t second) = 0;
  virtual void reinitialize() = 0;
  virtual void shutdown() = 0;
};

class RenrenServiceIfFactory {
 public:
  typedef RenrenServiceIf Handler;

  virtual ~RenrenServiceIfFactory() {}

  virtual RenrenServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RenrenServiceIf* /* handler */) = 0;
};

class RenrenServiceIfSingletonFactory : virtual public RenrenServiceIfFactory {
 public:
  RenrenServiceIfSingletonFactory(const boost::shared_ptr<RenrenServiceIf>& iface) : iface_(iface) {}
  virtual ~RenrenServiceIfSingletonFactory() {}

  virtual RenrenServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RenrenServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RenrenServiceIf> iface_;
};

class RenrenServiceNull : virtual public RenrenServiceIf {
 public:
  virtual ~RenrenServiceNull() {}
  void getName(std::string& /* _return */) {
    return;
  }
  void getVersion(std::string& /* _return */) {
    return;
  }
  int64_t aliveSince() {
    int64_t _return = 0;
    return _return;
  }
  RenrenBaseStatus::type getStatus() {
    RenrenBaseStatus::type _return = (RenrenBaseStatus::type)0;
    return _return;
  }
  void getCpuProfile(std::string& /* _return */, const int32_t /* profileDurationInSec */) {
    return;
  }
  void getStatusDetails(std::string& /* _return */) {
    return;
  }
  void getCounters(std::map<std::string, int64_t> & /* _return */) {
    return;
  }
  int64_t getCounter(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void getMean(std::string& /* _return */, const std::string& /* methodName */) {
    return;
  }
  void getMax(std::string& /* _return */, const std::string& /* methodName */, const int32_t /* second */) {
    return;
  }
  void reinitialize() {
    return;
  }
  void shutdown() {
    return;
  }
};


class RenrenService_getName_args {
 public:

  RenrenService_getName_args() {
  }

  virtual ~RenrenService_getName_args() throw() {}


  bool operator == (const RenrenService_getName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getName_pargs {
 public:


  virtual ~RenrenService_getName_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getName_result__isset {
  _RenrenService_getName_result__isset() : success(false) {}
  bool success;
} _RenrenService_getName_result__isset;

class RenrenService_getName_result {
 public:

  RenrenService_getName_result() : success("") {
  }

  virtual ~RenrenService_getName_result() throw() {}

  std::string success;

  _RenrenService_getName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RenrenService_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getName_presult__isset {
  _RenrenService_getName_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getName_presult__isset;

class RenrenService_getName_presult {
 public:


  virtual ~RenrenService_getName_presult() throw() {}

  std::string* success;

  _RenrenService_getName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RenrenService_getVersion_args {
 public:

  RenrenService_getVersion_args() {
  }

  virtual ~RenrenService_getVersion_args() throw() {}


  bool operator == (const RenrenService_getVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getVersion_pargs {
 public:


  virtual ~RenrenService_getVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getVersion_result__isset {
  _RenrenService_getVersion_result__isset() : success(false) {}
  bool success;
} _RenrenService_getVersion_result__isset;

class RenrenService_getVersion_result {
 public:

  RenrenService_getVersion_result() : success("") {
  }

  virtual ~RenrenService_getVersion_result() throw() {}

  std::string success;

  _RenrenService_getVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RenrenService_getVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getVersion_presult__isset {
  _RenrenService_getVersion_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getVersion_presult__isset;

class RenrenService_getVersion_presult {
 public:


  virtual ~RenrenService_getVersion_presult() throw() {}

  std::string* success;

  _RenrenService_getVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RenrenService_aliveSince_args {
 public:

  RenrenService_aliveSince_args() {
  }

  virtual ~RenrenService_aliveSince_args() throw() {}


  bool operator == (const RenrenService_aliveSince_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_aliveSince_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_aliveSince_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_aliveSince_pargs {
 public:


  virtual ~RenrenService_aliveSince_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_aliveSince_result__isset {
  _RenrenService_aliveSince_result__isset() : success(false) {}
  bool success;
} _RenrenService_aliveSince_result__isset;

class RenrenService_aliveSince_result {
 public:

  RenrenService_aliveSince_result() : success(0) {
  }

  virtual ~RenrenService_aliveSince_result() throw() {}

  int64_t success;

  _RenrenService_aliveSince_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const RenrenService_aliveSince_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_aliveSince_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_aliveSince_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_aliveSince_presult__isset {
  _RenrenService_aliveSince_presult__isset() : success(false) {}
  bool success;
} _RenrenService_aliveSince_presult__isset;

class RenrenService_aliveSince_presult {
 public:


  virtual ~RenrenService_aliveSince_presult() throw() {}

  int64_t* success;

  _RenrenService_aliveSince_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RenrenService_getStatus_args {
 public:

  RenrenService_getStatus_args() {
  }

  virtual ~RenrenService_getStatus_args() throw() {}


  bool operator == (const RenrenService_getStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_getStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getStatus_pargs {
 public:


  virtual ~RenrenService_getStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getStatus_result__isset {
  _RenrenService_getStatus_result__isset() : success(false) {}
  bool success;
} _RenrenService_getStatus_result__isset;

class RenrenService_getStatus_result {
 public:

  RenrenService_getStatus_result() : success((RenrenBaseStatus::type)0) {
  }

  virtual ~RenrenService_getStatus_result() throw() {}

  RenrenBaseStatus::type success;

  _RenrenService_getStatus_result__isset __isset;

  void __set_success(const RenrenBaseStatus::type val) {
    success = val;
  }

  bool operator == (const RenrenService_getStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getStatus_presult__isset {
  _RenrenService_getStatus_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getStatus_presult__isset;

class RenrenService_getStatus_presult {
 public:


  virtual ~RenrenService_getStatus_presult() throw() {}

  RenrenBaseStatus::type* success;

  _RenrenService_getStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RenrenService_getCpuProfile_args__isset {
  _RenrenService_getCpuProfile_args__isset() : profileDurationInSec(false) {}
  bool profileDurationInSec;
} _RenrenService_getCpuProfile_args__isset;

class RenrenService_getCpuProfile_args {
 public:

  RenrenService_getCpuProfile_args() : profileDurationInSec(0) {
  }

  virtual ~RenrenService_getCpuProfile_args() throw() {}

  int32_t profileDurationInSec;

  _RenrenService_getCpuProfile_args__isset __isset;

  void __set_profileDurationInSec(const int32_t val) {
    profileDurationInSec = val;
  }

  bool operator == (const RenrenService_getCpuProfile_args & rhs) const
  {
    if (!(profileDurationInSec == rhs.profileDurationInSec))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getCpuProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getCpuProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getCpuProfile_pargs {
 public:


  virtual ~RenrenService_getCpuProfile_pargs() throw() {}

  const int32_t* profileDurationInSec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getCpuProfile_result__isset {
  _RenrenService_getCpuProfile_result__isset() : success(false) {}
  bool success;
} _RenrenService_getCpuProfile_result__isset;

class RenrenService_getCpuProfile_result {
 public:

  RenrenService_getCpuProfile_result() : success("") {
  }

  virtual ~RenrenService_getCpuProfile_result() throw() {}

  std::string success;

  _RenrenService_getCpuProfile_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RenrenService_getCpuProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getCpuProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getCpuProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getCpuProfile_presult__isset {
  _RenrenService_getCpuProfile_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getCpuProfile_presult__isset;

class RenrenService_getCpuProfile_presult {
 public:


  virtual ~RenrenService_getCpuProfile_presult() throw() {}

  std::string* success;

  _RenrenService_getCpuProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RenrenService_getStatusDetails_args {
 public:

  RenrenService_getStatusDetails_args() {
  }

  virtual ~RenrenService_getStatusDetails_args() throw() {}


  bool operator == (const RenrenService_getStatusDetails_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_getStatusDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getStatusDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getStatusDetails_pargs {
 public:


  virtual ~RenrenService_getStatusDetails_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getStatusDetails_result__isset {
  _RenrenService_getStatusDetails_result__isset() : success(false) {}
  bool success;
} _RenrenService_getStatusDetails_result__isset;

class RenrenService_getStatusDetails_result {
 public:

  RenrenService_getStatusDetails_result() : success("") {
  }

  virtual ~RenrenService_getStatusDetails_result() throw() {}

  std::string success;

  _RenrenService_getStatusDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RenrenService_getStatusDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getStatusDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getStatusDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getStatusDetails_presult__isset {
  _RenrenService_getStatusDetails_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getStatusDetails_presult__isset;

class RenrenService_getStatusDetails_presult {
 public:


  virtual ~RenrenService_getStatusDetails_presult() throw() {}

  std::string* success;

  _RenrenService_getStatusDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RenrenService_getCounters_args {
 public:

  RenrenService_getCounters_args() {
  }

  virtual ~RenrenService_getCounters_args() throw() {}


  bool operator == (const RenrenService_getCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_getCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getCounters_pargs {
 public:


  virtual ~RenrenService_getCounters_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getCounters_result__isset {
  _RenrenService_getCounters_result__isset() : success(false) {}
  bool success;
} _RenrenService_getCounters_result__isset;

class RenrenService_getCounters_result {
 public:

  RenrenService_getCounters_result() {
  }

  virtual ~RenrenService_getCounters_result() throw() {}

  std::map<std::string, int64_t>  success;

  _RenrenService_getCounters_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val) {
    success = val;
  }

  bool operator == (const RenrenService_getCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getCounters_presult__isset {
  _RenrenService_getCounters_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getCounters_presult__isset;

class RenrenService_getCounters_presult {
 public:


  virtual ~RenrenService_getCounters_presult() throw() {}

  std::map<std::string, int64_t> * success;

  _RenrenService_getCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RenrenService_getCounter_args__isset {
  _RenrenService_getCounter_args__isset() : key(false) {}
  bool key;
} _RenrenService_getCounter_args__isset;

class RenrenService_getCounter_args {
 public:

  RenrenService_getCounter_args() : key("") {
  }

  virtual ~RenrenService_getCounter_args() throw() {}

  std::string key;

  _RenrenService_getCounter_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const RenrenService_getCounter_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getCounter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getCounter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getCounter_pargs {
 public:


  virtual ~RenrenService_getCounter_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getCounter_result__isset {
  _RenrenService_getCounter_result__isset() : success(false) {}
  bool success;
} _RenrenService_getCounter_result__isset;

class RenrenService_getCounter_result {
 public:

  RenrenService_getCounter_result() : success(0) {
  }

  virtual ~RenrenService_getCounter_result() throw() {}

  int64_t success;

  _RenrenService_getCounter_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const RenrenService_getCounter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getCounter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getCounter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getCounter_presult__isset {
  _RenrenService_getCounter_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getCounter_presult__isset;

class RenrenService_getCounter_presult {
 public:


  virtual ~RenrenService_getCounter_presult() throw() {}

  int64_t* success;

  _RenrenService_getCounter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RenrenService_getMean_args__isset {
  _RenrenService_getMean_args__isset() : methodName(false) {}
  bool methodName;
} _RenrenService_getMean_args__isset;

class RenrenService_getMean_args {
 public:

  RenrenService_getMean_args() : methodName("") {
  }

  virtual ~RenrenService_getMean_args() throw() {}

  std::string methodName;

  _RenrenService_getMean_args__isset __isset;

  void __set_methodName(const std::string& val) {
    methodName = val;
  }

  bool operator == (const RenrenService_getMean_args & rhs) const
  {
    if (!(methodName == rhs.methodName))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getMean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getMean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getMean_pargs {
 public:


  virtual ~RenrenService_getMean_pargs() throw() {}

  const std::string* methodName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getMean_result__isset {
  _RenrenService_getMean_result__isset() : success(false) {}
  bool success;
} _RenrenService_getMean_result__isset;

class RenrenService_getMean_result {
 public:

  RenrenService_getMean_result() : success("") {
  }

  virtual ~RenrenService_getMean_result() throw() {}

  std::string success;

  _RenrenService_getMean_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RenrenService_getMean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getMean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getMean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getMean_presult__isset {
  _RenrenService_getMean_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getMean_presult__isset;

class RenrenService_getMean_presult {
 public:


  virtual ~RenrenService_getMean_presult() throw() {}

  std::string* success;

  _RenrenService_getMean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RenrenService_getMax_args__isset {
  _RenrenService_getMax_args__isset() : methodName(false), second(false) {}
  bool methodName;
  bool second;
} _RenrenService_getMax_args__isset;

class RenrenService_getMax_args {
 public:

  RenrenService_getMax_args() : methodName(""), second(0) {
  }

  virtual ~RenrenService_getMax_args() throw() {}

  std::string methodName;
  int32_t second;

  _RenrenService_getMax_args__isset __isset;

  void __set_methodName(const std::string& val) {
    methodName = val;
  }

  void __set_second(const int32_t val) {
    second = val;
  }

  bool operator == (const RenrenService_getMax_args & rhs) const
  {
    if (!(methodName == rhs.methodName))
      return false;
    if (!(second == rhs.second))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getMax_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getMax_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_getMax_pargs {
 public:


  virtual ~RenrenService_getMax_pargs() throw() {}

  const std::string* methodName;
  const int32_t* second;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getMax_result__isset {
  _RenrenService_getMax_result__isset() : success(false) {}
  bool success;
} _RenrenService_getMax_result__isset;

class RenrenService_getMax_result {
 public:

  RenrenService_getMax_result() : success("") {
  }

  virtual ~RenrenService_getMax_result() throw() {}

  std::string success;

  _RenrenService_getMax_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RenrenService_getMax_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RenrenService_getMax_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_getMax_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RenrenService_getMax_presult__isset {
  _RenrenService_getMax_presult__isset() : success(false) {}
  bool success;
} _RenrenService_getMax_presult__isset;

class RenrenService_getMax_presult {
 public:


  virtual ~RenrenService_getMax_presult() throw() {}

  std::string* success;

  _RenrenService_getMax_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RenrenService_reinitialize_args {
 public:

  RenrenService_reinitialize_args() {
  }

  virtual ~RenrenService_reinitialize_args() throw() {}


  bool operator == (const RenrenService_reinitialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_reinitialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_reinitialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_reinitialize_pargs {
 public:


  virtual ~RenrenService_reinitialize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_shutdown_args {
 public:

  RenrenService_shutdown_args() {
  }

  virtual ~RenrenService_shutdown_args() throw() {}


  bool operator == (const RenrenService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RenrenService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenrenService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RenrenService_shutdown_pargs {
 public:


  virtual ~RenrenService_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class RenrenServiceClient : virtual public RenrenServiceIf {
 public:
  RenrenServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RenrenServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getName(std::string& _return);
  void send_getName();
  void recv_getName(std::string& _return);
  void getVersion(std::string& _return);
  void send_getVersion();
  void recv_getVersion(std::string& _return);
  int64_t aliveSince();
  void send_aliveSince();
  int64_t recv_aliveSince();
  RenrenBaseStatus::type getStatus();
  void send_getStatus();
  RenrenBaseStatus::type recv_getStatus();
  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec);
  void send_getCpuProfile(const int32_t profileDurationInSec);
  void recv_getCpuProfile(std::string& _return);
  void getStatusDetails(std::string& _return);
  void send_getStatusDetails();
  void recv_getStatusDetails(std::string& _return);
  void getCounters(std::map<std::string, int64_t> & _return);
  void send_getCounters();
  void recv_getCounters(std::map<std::string, int64_t> & _return);
  int64_t getCounter(const std::string& key);
  void send_getCounter(const std::string& key);
  int64_t recv_getCounter();
  void getMean(std::string& _return, const std::string& methodName);
  void send_getMean(const std::string& methodName);
  void recv_getMean(std::string& _return);
  void getMax(std::string& _return, const std::string& methodName, const int32_t second);
  void send_getMax(const std::string& methodName, const int32_t second);
  void recv_getMax(std::string& _return);
  void reinitialize();
  void send_reinitialize();
  void shutdown();
  void send_shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RenrenServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<RenrenServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (RenrenServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVersion(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aliveSince(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCpuProfile(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatusDetails(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounters(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounter(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMean(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMax(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reinitialize(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RenrenServiceProcessor(boost::shared_ptr<RenrenServiceIf> iface) :
    iface_(iface) {
    processMap_["getName"] = &RenrenServiceProcessor::process_getName;
    processMap_["getVersion"] = &RenrenServiceProcessor::process_getVersion;
    processMap_["aliveSince"] = &RenrenServiceProcessor::process_aliveSince;
    processMap_["getStatus"] = &RenrenServiceProcessor::process_getStatus;
    processMap_["getCpuProfile"] = &RenrenServiceProcessor::process_getCpuProfile;
    processMap_["getStatusDetails"] = &RenrenServiceProcessor::process_getStatusDetails;
    processMap_["getCounters"] = &RenrenServiceProcessor::process_getCounters;
    processMap_["getCounter"] = &RenrenServiceProcessor::process_getCounter;
    processMap_["getMean"] = &RenrenServiceProcessor::process_getMean;
    processMap_["getMax"] = &RenrenServiceProcessor::process_getMax;
    processMap_["reinitialize"] = &RenrenServiceProcessor::process_reinitialize;
    processMap_["shutdown"] = &RenrenServiceProcessor::process_shutdown;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~RenrenServiceProcessor() {}
};

class RenrenServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RenrenServiceProcessorFactory(const ::boost::shared_ptr< RenrenServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RenrenServiceIfFactory > handlerFactory_;
};

class RenrenServiceMultiface : virtual public RenrenServiceIf {
 public:
  RenrenServiceMultiface(std::vector<boost::shared_ptr<RenrenServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RenrenServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RenrenServiceIf> > ifaces_;
  RenrenServiceMultiface() {}
  void add(boost::shared_ptr<RenrenServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getName(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getName(_return);
        return;
      } else {
        ifaces_[i]->getName(_return);
      }
    }
  }

  void getVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getVersion(_return);
        return;
      } else {
        ifaces_[i]->getVersion(_return);
      }
    }
  }

  int64_t aliveSince() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->aliveSince();
      } else {
        ifaces_[i]->aliveSince();
      }
    }
  }

  RenrenBaseStatus::type getStatus() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getStatus();
      } else {
        ifaces_[i]->getStatus();
      }
    }
  }

  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
        return;
      } else {
        ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
      }
    }
  }

  void getStatusDetails(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getStatusDetails(_return);
        return;
      } else {
        ifaces_[i]->getStatusDetails(_return);
      }
    }
  }

  void getCounters(std::map<std::string, int64_t> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getCounters(_return);
        return;
      } else {
        ifaces_[i]->getCounters(_return);
      }
    }
  }

  int64_t getCounter(const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getCounter(key);
      } else {
        ifaces_[i]->getCounter(key);
      }
    }
  }

  void getMean(std::string& _return, const std::string& methodName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMean(_return, methodName);
        return;
      } else {
        ifaces_[i]->getMean(_return, methodName);
      }
    }
  }

  void getMax(std::string& _return, const std::string& methodName, const int32_t second) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMax(_return, methodName, second);
        return;
      } else {
        ifaces_[i]->getMax(_return, methodName, second);
      }
    }
  }

  void reinitialize() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->reinitialize();
    }
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdown();
    }
  }

};

}} // namespace

#endif

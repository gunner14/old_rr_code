// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tripodlike.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xce {
namespace tripodlike {

namespace {

const ::google::protobuf::Descriptor* TripodLikeShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripodLikeShip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tripodlike_2eproto() {
  protobuf_AddDesc_tripodlike_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tripodlike.proto");
  GOOGLE_CHECK(file != NULL);
  TripodLikeShip_descriptor_ = file->message_type(0);
  static const int TripodLikeShip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripodLikeShip, userids_),
  };
  TripodLikeShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripodLikeShip_descriptor_,
      TripodLikeShip::default_instance_,
      TripodLikeShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripodLikeShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripodLikeShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripodLikeShip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tripodlike_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripodLikeShip_descriptor_, &TripodLikeShip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tripodlike_2eproto() {
  delete TripodLikeShip::default_instance_;
  delete TripodLikeShip_reflection_;
}

void protobuf_AddDesc_tripodlike_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tripodlike.proto\022\016xce.tripodlike\"!\n\016Tr"
    "ipodLikeShip\022\017\n\007userIds\030\001 \003(\005", 69);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tripodlike.proto", &protobuf_RegisterTypes);
  TripodLikeShip::default_instance_ = new TripodLikeShip();
  TripodLikeShip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tripodlike_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tripodlike_2eproto {
  StaticDescriptorInitializer_tripodlike_2eproto() {
    protobuf_AddDesc_tripodlike_2eproto();
  }
} static_descriptor_initializer_tripodlike_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TripodLikeShip::kUserIdsFieldNumber;
#endif  // !_MSC_VER

TripodLikeShip::TripodLikeShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripodLikeShip::InitAsDefaultInstance() {
}

TripodLikeShip::TripodLikeShip(const TripodLikeShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripodLikeShip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripodLikeShip::~TripodLikeShip() {
  SharedDtor();
}

void TripodLikeShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripodLikeShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripodLikeShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripodLikeShip_descriptor_;
}

const TripodLikeShip& TripodLikeShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripodlike_2eproto();  return *default_instance_;
}

TripodLikeShip* TripodLikeShip::default_instance_ = NULL;

TripodLikeShip* TripodLikeShip::New() const {
  return new TripodLikeShip;
}

void TripodLikeShip::Clear() {
  userids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripodLikeShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 userIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_userids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_userIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripodLikeShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 userIds = 1;
  for (int i = 0; i < this->userids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->userids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripodLikeShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 userIds = 1;
  for (int i = 0; i < this->userids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->userids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripodLikeShip::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 userIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->userids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userids(i));
    }
    total_size += 1 * this->userids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripodLikeShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripodLikeShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripodLikeShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripodLikeShip::MergeFrom(const TripodLikeShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  userids_.MergeFrom(from.userids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripodLikeShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripodLikeShip::CopyFrom(const TripodLikeShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripodLikeShip::IsInitialized() const {
  
  return true;
}

void TripodLikeShip::Swap(TripodLikeShip* other) {
  if (other != this) {
    userids_.Swap(&other->userids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripodLikeShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripodLikeShip_descriptor_;
  metadata.reflection = TripodLikeShip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tripodlike
}  // namespace xce

// @@protoc_insertion_point(global_scope)

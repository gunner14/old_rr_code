/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ImprService_H
#define ImprService_H

#include <TProcessor.h>
#include "engine_types.h"

namespace com { namespace renren { namespace ad { namespace engine {

class ImprServiceIf {
 public:
  virtual ~ImprServiceIf() {}
  virtual void handleRequest(AdResponse& _return, const AdRequest& request) = 0;
  virtual void handleClick(const ClickAction& clickAction) = 0;
};

class ImprServiceNull : virtual public ImprServiceIf {
 public:
  virtual ~ImprServiceNull() {}
  void handleRequest(AdResponse& /* _return */, const AdRequest& /* request */) {
    return;
  }
  void handleClick(const ClickAction& /* clickAction */) {
    return;
  }
};

typedef struct _ImprService_handleRequest_args__isset {
  _ImprService_handleRequest_args__isset() : request(false) {}
  bool request;
} _ImprService_handleRequest_args__isset;

class ImprService_handleRequest_args {
 public:

  ImprService_handleRequest_args() {
  }

  virtual ~ImprService_handleRequest_args() throw() {}

  AdRequest request;

  _ImprService_handleRequest_args__isset __isset;

  bool operator == (const ImprService_handleRequest_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ImprService_handleRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImprService_handleRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImprService_handleRequest_pargs {
 public:


  virtual ~ImprService_handleRequest_pargs() throw() {}

  const AdRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImprService_handleRequest_result__isset {
  _ImprService_handleRequest_result__isset() : success(false) {}
  bool success;
} _ImprService_handleRequest_result__isset;

class ImprService_handleRequest_result {
 public:

  ImprService_handleRequest_result() {
  }

  virtual ~ImprService_handleRequest_result() throw() {}

  AdResponse success;

  _ImprService_handleRequest_result__isset __isset;

  bool operator == (const ImprService_handleRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImprService_handleRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImprService_handleRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImprService_handleRequest_presult__isset {
  _ImprService_handleRequest_presult__isset() : success(false) {}
  bool success;
} _ImprService_handleRequest_presult__isset;

class ImprService_handleRequest_presult {
 public:


  virtual ~ImprService_handleRequest_presult() throw() {}

  AdResponse* success;

  _ImprService_handleRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImprService_handleClick_args__isset {
  _ImprService_handleClick_args__isset() : clickAction(false) {}
  bool clickAction;
} _ImprService_handleClick_args__isset;

class ImprService_handleClick_args {
 public:

  ImprService_handleClick_args() {
  }

  virtual ~ImprService_handleClick_args() throw() {}

  ClickAction clickAction;

  _ImprService_handleClick_args__isset __isset;

  bool operator == (const ImprService_handleClick_args & rhs) const
  {
    if (!(clickAction == rhs.clickAction))
      return false;
    return true;
  }
  bool operator != (const ImprService_handleClick_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImprService_handleClick_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImprService_handleClick_pargs {
 public:


  virtual ~ImprService_handleClick_pargs() throw() {}

  const ClickAction* clickAction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImprService_handleClick_result {
 public:

  ImprService_handleClick_result() {
  }

  virtual ~ImprService_handleClick_result() throw() {}


  bool operator == (const ImprService_handleClick_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImprService_handleClick_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImprService_handleClick_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImprService_handleClick_presult {
 public:


  virtual ~ImprService_handleClick_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImprServiceClient : virtual public ImprServiceIf {
 public:
  ImprServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ImprServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void handleRequest(AdResponse& _return, const AdRequest& request);
  void send_handleRequest(const AdRequest& request);
  void recv_handleRequest(AdResponse& _return);
  void handleClick(const ClickAction& clickAction);
  void send_handleClick(const ClickAction& clickAction);
  void recv_handleClick();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ImprServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ImprServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (ImprServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_handleRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_handleClick(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  ImprServiceProcessor(boost::shared_ptr<ImprServiceIf> iface) :
    iface_(iface) {
    processMap_["handleRequest"] = &ImprServiceProcessor::process_handleRequest;
    processMap_["handleClick"] = &ImprServiceProcessor::process_handleClick;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~ImprServiceProcessor() {}
};

class ImprServiceMultiface : virtual public ImprServiceIf {
 public:
  ImprServiceMultiface(std::vector<boost::shared_ptr<ImprServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ImprServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImprServiceIf> > ifaces_;
  ImprServiceMultiface() {}
  void add(boost::shared_ptr<ImprServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void handleRequest(AdResponse& _return, const AdRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->handleRequest(_return, request);
        return;
      } else {
        ifaces_[i]->handleRequest(_return, request);
      }
    }
  }

  void handleClick(const ClickAction& clickAction) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->handleClick(clickAction);
    }
  }

};

}}}} // namespace

#endif

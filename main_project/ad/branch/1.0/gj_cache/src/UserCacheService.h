/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef UserCacheService_H
#define UserCacheService_H

#include <TProcessor.h>
#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



class UserCacheServiceIf {
 public:
  virtual ~UserCacheServiceIf() {}
  virtual void getFollower(std::vector<int64_t> & _return, const int64_t uid, const int32_t limit) = 0;
  virtual void getFans(std::vector<int64_t> & _return, const int64_t uid, const int32_t limit) = 0;
};

class UserCacheServiceNull : virtual public UserCacheServiceIf {
 public:
  virtual ~UserCacheServiceNull() {}
  void getFollower(std::vector<int64_t> & /* _return */, const int64_t /* uid */, const int32_t /* limit */) {
    return;
  }
  void getFans(std::vector<int64_t> & /* _return */, const int64_t /* uid */, const int32_t /* limit */) {
    return;
  }
};

typedef struct _UserCacheService_getFollower_args__isset {
  _UserCacheService_getFollower_args__isset() : uid(false), limit(false) {}
  bool uid;
  bool limit;
} _UserCacheService_getFollower_args__isset;

class UserCacheService_getFollower_args {
 public:

  UserCacheService_getFollower_args() : uid(0), limit(0) {
  }

  virtual ~UserCacheService_getFollower_args() throw() {}

  int64_t uid;
  int32_t limit;

  _UserCacheService_getFollower_args__isset __isset;

  bool operator == (const UserCacheService_getFollower_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const UserCacheService_getFollower_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserCacheService_getFollower_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserCacheService_getFollower_pargs {
 public:


  virtual ~UserCacheService_getFollower_pargs() throw() {}

  const int64_t* uid;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserCacheService_getFollower_result__isset {
  _UserCacheService_getFollower_result__isset() : success(false) {}
  bool success;
} _UserCacheService_getFollower_result__isset;

class UserCacheService_getFollower_result {
 public:

  UserCacheService_getFollower_result() {
  }

  virtual ~UserCacheService_getFollower_result() throw() {}

  std::vector<int64_t>  success;

  _UserCacheService_getFollower_result__isset __isset;

  bool operator == (const UserCacheService_getFollower_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserCacheService_getFollower_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserCacheService_getFollower_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserCacheService_getFollower_presult__isset {
  _UserCacheService_getFollower_presult__isset() : success(false) {}
  bool success;
} _UserCacheService_getFollower_presult__isset;

class UserCacheService_getFollower_presult {
 public:


  virtual ~UserCacheService_getFollower_presult() throw() {}

  std::vector<int64_t> * success;

  _UserCacheService_getFollower_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserCacheService_getFans_args__isset {
  _UserCacheService_getFans_args__isset() : uid(false), limit(false) {}
  bool uid;
  bool limit;
} _UserCacheService_getFans_args__isset;

class UserCacheService_getFans_args {
 public:

  UserCacheService_getFans_args() : uid(0), limit(0) {
  }

  virtual ~UserCacheService_getFans_args() throw() {}

  int64_t uid;
  int32_t limit;

  _UserCacheService_getFans_args__isset __isset;

  bool operator == (const UserCacheService_getFans_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const UserCacheService_getFans_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserCacheService_getFans_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserCacheService_getFans_pargs {
 public:


  virtual ~UserCacheService_getFans_pargs() throw() {}

  const int64_t* uid;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserCacheService_getFans_result__isset {
  _UserCacheService_getFans_result__isset() : success(false) {}
  bool success;
} _UserCacheService_getFans_result__isset;

class UserCacheService_getFans_result {
 public:

  UserCacheService_getFans_result() {
  }

  virtual ~UserCacheService_getFans_result() throw() {}

  std::vector<int64_t>  success;

  _UserCacheService_getFans_result__isset __isset;

  bool operator == (const UserCacheService_getFans_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserCacheService_getFans_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserCacheService_getFans_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserCacheService_getFans_presult__isset {
  _UserCacheService_getFans_presult__isset() : success(false) {}
  bool success;
} _UserCacheService_getFans_presult__isset;

class UserCacheService_getFans_presult {
 public:


  virtual ~UserCacheService_getFans_presult() throw() {}

  std::vector<int64_t> * success;

  _UserCacheService_getFans_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserCacheServiceClient : virtual public UserCacheServiceIf {
 public:
  UserCacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  UserCacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getFollower(std::vector<int64_t> & _return, const int64_t uid, const int32_t limit);
  void send_getFollower(const int64_t uid, const int32_t limit);
  void recv_getFollower(std::vector<int64_t> & _return);
  void getFans(std::vector<int64_t> & _return, const int64_t uid, const int32_t limit);
  void send_getFans(const int64_t uid, const int32_t limit);
  void recv_getFans(std::vector<int64_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserCacheServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<UserCacheServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (UserCacheServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_getFollower(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getFans(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  UserCacheServiceProcessor(boost::shared_ptr<UserCacheServiceIf> iface) :
    iface_(iface) {
    processMap_["getFollower"] = &UserCacheServiceProcessor::process_getFollower;
    processMap_["getFans"] = &UserCacheServiceProcessor::process_getFans;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~UserCacheServiceProcessor() {}
};

class UserCacheServiceMultiface : virtual public UserCacheServiceIf {
 public:
  UserCacheServiceMultiface(std::vector<boost::shared_ptr<UserCacheServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserCacheServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserCacheServiceIf> > ifaces_;
  UserCacheServiceMultiface() {}
  void add(boost::shared_ptr<UserCacheServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getFollower(std::vector<int64_t> & _return, const int64_t uid, const int32_t limit) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getFollower(_return, uid, limit);
        return;
      } else {
        ifaces_[i]->getFollower(_return, uid, limit);
      }
    }
  }

  void getFans(std::vector<int64_t> & _return, const int64_t uid, const int32_t limit) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getFans(_return, uid, limit);
        return;
      } else {
        ifaces_[i]->getFans(_return, uid, limit);
      }
    }
  }

};



#endif

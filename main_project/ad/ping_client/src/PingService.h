/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef PingService_H
#define PingService_H

#include <TProcessor.h>
#include "ping_types.h"

namespace com { namespace renren { namespace ad { namespace ping {

class PingServiceIf {
 public:
  virtual ~PingServiceIf() {}
  virtual void ping(const std::string& serviceName, const std::string& node, const std::string& tag, const int64_t value) = 0;
  virtual void pingBatch(const std::string& serviceName, const std::string& node, const std::string& tag, const std::vector<int64_t> & value) = 0;
  virtual void getServiceNodeStat(std::vector<StatEntry> & _return) = 0;
  virtual void getTagStat(std::vector<StatEntry> & _return, const std::string& serviceName) = 0;
  virtual void removeStat(const std::string& serviceName, const std::string& node) = 0;
};

class PingServiceNull : virtual public PingServiceIf {
 public:
  virtual ~PingServiceNull() {}
  void ping(const std::string& /* serviceName */, const std::string& /* node */, const std::string& /* tag */, const int64_t /* value */) {
    return;
  }
  void pingBatch(const std::string& /* serviceName */, const std::string& /* node */, const std::string& /* tag */, const std::vector<int64_t> & /* value */) {
    return;
  }
  void getServiceNodeStat(std::vector<StatEntry> & /* _return */) {
    return;
  }
  void getTagStat(std::vector<StatEntry> & /* _return */, const std::string& /* serviceName */) {
    return;
  }
  void removeStat(const std::string& /* serviceName */, const std::string& /* node */) {
    return;
  }
};

typedef struct _PingService_ping_args__isset {
  _PingService_ping_args__isset() : serviceName(false), node(false), tag(false), value(false) {}
  bool serviceName;
  bool node;
  bool tag;
  bool value;
} _PingService_ping_args__isset;

class PingService_ping_args {
 public:

  PingService_ping_args() : serviceName(""), node(""), tag(""), value(0) {
  }

  virtual ~PingService_ping_args() throw() {}

  std::string serviceName;
  std::string node;
  std::string tag;
  int64_t value;

  _PingService_ping_args__isset __isset;

  bool operator == (const PingService_ping_args & rhs) const
  {
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(node == rhs.node))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PingService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_ping_pargs {
 public:


  virtual ~PingService_ping_pargs() throw() {}

  const std::string* serviceName;
  const std::string* node;
  const std::string* tag;
  const int64_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_ping_result {
 public:

  PingService_ping_result() {
  }

  virtual ~PingService_ping_result() throw() {}


  bool operator == (const PingService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_ping_presult {
 public:


  virtual ~PingService_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PingService_pingBatch_args__isset {
  _PingService_pingBatch_args__isset() : serviceName(false), node(false), tag(false), value(false) {}
  bool serviceName;
  bool node;
  bool tag;
  bool value;
} _PingService_pingBatch_args__isset;

class PingService_pingBatch_args {
 public:

  PingService_pingBatch_args() : serviceName(""), node(""), tag("") {
  }

  virtual ~PingService_pingBatch_args() throw() {}

  std::string serviceName;
  std::string node;
  std::string tag;
  std::vector<int64_t>  value;

  _PingService_pingBatch_args__isset __isset;

  bool operator == (const PingService_pingBatch_args & rhs) const
  {
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(node == rhs.node))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PingService_pingBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_pingBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_pingBatch_pargs {
 public:


  virtual ~PingService_pingBatch_pargs() throw() {}

  const std::string* serviceName;
  const std::string* node;
  const std::string* tag;
  const std::vector<int64_t> * value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_pingBatch_result {
 public:

  PingService_pingBatch_result() {
  }

  virtual ~PingService_pingBatch_result() throw() {}


  bool operator == (const PingService_pingBatch_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingService_pingBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_pingBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_pingBatch_presult {
 public:


  virtual ~PingService_pingBatch_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PingService_getServiceNodeStat_args {
 public:

  PingService_getServiceNodeStat_args() {
  }

  virtual ~PingService_getServiceNodeStat_args() throw() {}


  bool operator == (const PingService_getServiceNodeStat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingService_getServiceNodeStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_getServiceNodeStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_getServiceNodeStat_pargs {
 public:


  virtual ~PingService_getServiceNodeStat_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PingService_getServiceNodeStat_result__isset {
  _PingService_getServiceNodeStat_result__isset() : success(false) {}
  bool success;
} _PingService_getServiceNodeStat_result__isset;

class PingService_getServiceNodeStat_result {
 public:

  PingService_getServiceNodeStat_result() {
  }

  virtual ~PingService_getServiceNodeStat_result() throw() {}

  std::vector<StatEntry>  success;

  _PingService_getServiceNodeStat_result__isset __isset;

  bool operator == (const PingService_getServiceNodeStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PingService_getServiceNodeStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_getServiceNodeStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PingService_getServiceNodeStat_presult__isset {
  _PingService_getServiceNodeStat_presult__isset() : success(false) {}
  bool success;
} _PingService_getServiceNodeStat_presult__isset;

class PingService_getServiceNodeStat_presult {
 public:


  virtual ~PingService_getServiceNodeStat_presult() throw() {}

  std::vector<StatEntry> * success;

  _PingService_getServiceNodeStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PingService_getTagStat_args__isset {
  _PingService_getTagStat_args__isset() : serviceName(false) {}
  bool serviceName;
} _PingService_getTagStat_args__isset;

class PingService_getTagStat_args {
 public:

  PingService_getTagStat_args() : serviceName("") {
  }

  virtual ~PingService_getTagStat_args() throw() {}

  std::string serviceName;

  _PingService_getTagStat_args__isset __isset;

  bool operator == (const PingService_getTagStat_args & rhs) const
  {
    if (!(serviceName == rhs.serviceName))
      return false;
    return true;
  }
  bool operator != (const PingService_getTagStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_getTagStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_getTagStat_pargs {
 public:


  virtual ~PingService_getTagStat_pargs() throw() {}

  const std::string* serviceName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PingService_getTagStat_result__isset {
  _PingService_getTagStat_result__isset() : success(false) {}
  bool success;
} _PingService_getTagStat_result__isset;

class PingService_getTagStat_result {
 public:

  PingService_getTagStat_result() {
  }

  virtual ~PingService_getTagStat_result() throw() {}

  std::vector<StatEntry>  success;

  _PingService_getTagStat_result__isset __isset;

  bool operator == (const PingService_getTagStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PingService_getTagStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_getTagStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PingService_getTagStat_presult__isset {
  _PingService_getTagStat_presult__isset() : success(false) {}
  bool success;
} _PingService_getTagStat_presult__isset;

class PingService_getTagStat_presult {
 public:


  virtual ~PingService_getTagStat_presult() throw() {}

  std::vector<StatEntry> * success;

  _PingService_getTagStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PingService_removeStat_args__isset {
  _PingService_removeStat_args__isset() : serviceName(false), node(false) {}
  bool serviceName;
  bool node;
} _PingService_removeStat_args__isset;

class PingService_removeStat_args {
 public:

  PingService_removeStat_args() : serviceName(""), node("") {
  }

  virtual ~PingService_removeStat_args() throw() {}

  std::string serviceName;
  std::string node;

  _PingService_removeStat_args__isset __isset;

  bool operator == (const PingService_removeStat_args & rhs) const
  {
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(node == rhs.node))
      return false;
    return true;
  }
  bool operator != (const PingService_removeStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_removeStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_removeStat_pargs {
 public:


  virtual ~PingService_removeStat_pargs() throw() {}

  const std::string* serviceName;
  const std::string* node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_removeStat_result {
 public:

  PingService_removeStat_result() {
  }

  virtual ~PingService_removeStat_result() throw() {}


  bool operator == (const PingService_removeStat_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingService_removeStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingService_removeStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingService_removeStat_presult {
 public:


  virtual ~PingService_removeStat_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PingServiceClient : virtual public PingServiceIf {
 public:
  PingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(const std::string& serviceName, const std::string& node, const std::string& tag, const int64_t value);
  void send_ping(const std::string& serviceName, const std::string& node, const std::string& tag, const int64_t value);
  void recv_ping();
  void pingBatch(const std::string& serviceName, const std::string& node, const std::string& tag, const std::vector<int64_t> & value);
  void send_pingBatch(const std::string& serviceName, const std::string& node, const std::string& tag, const std::vector<int64_t> & value);
  void recv_pingBatch();
  void getServiceNodeStat(std::vector<StatEntry> & _return);
  void send_getServiceNodeStat();
  void recv_getServiceNodeStat(std::vector<StatEntry> & _return);
  void getTagStat(std::vector<StatEntry> & _return, const std::string& serviceName);
  void send_getTagStat(const std::string& serviceName);
  void recv_getTagStat(std::vector<StatEntry> & _return);
  void removeStat(const std::string& serviceName, const std::string& node);
  void send_removeStat(const std::string& serviceName, const std::string& node);
  void recv_removeStat();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PingServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<PingServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (PingServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_pingBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getServiceNodeStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getTagStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_removeStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  PingServiceProcessor(boost::shared_ptr<PingServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &PingServiceProcessor::process_ping;
    processMap_["pingBatch"] = &PingServiceProcessor::process_pingBatch;
    processMap_["getServiceNodeStat"] = &PingServiceProcessor::process_getServiceNodeStat;
    processMap_["getTagStat"] = &PingServiceProcessor::process_getTagStat;
    processMap_["removeStat"] = &PingServiceProcessor::process_removeStat;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~PingServiceProcessor() {}
};

class PingServiceMultiface : virtual public PingServiceIf {
 public:
  PingServiceMultiface(std::vector<boost::shared_ptr<PingServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PingServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PingServiceIf> > ifaces_;
  PingServiceMultiface() {}
  void add(boost::shared_ptr<PingServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(const std::string& serviceName, const std::string& node, const std::string& tag, const int64_t value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping(serviceName, node, tag, value);
    }
  }

  void pingBatch(const std::string& serviceName, const std::string& node, const std::string& tag, const std::vector<int64_t> & value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->pingBatch(serviceName, node, tag, value);
    }
  }

  void getServiceNodeStat(std::vector<StatEntry> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getServiceNodeStat(_return);
        return;
      } else {
        ifaces_[i]->getServiceNodeStat(_return);
      }
    }
  }

  void getTagStat(std::vector<StatEntry> & _return, const std::string& serviceName) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getTagStat(_return, serviceName);
        return;
      } else {
        ifaces_[i]->getTagStat(_return, serviceName);
      }
    }
  }

  void removeStat(const std::string& serviceName, const std::string& node) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->removeStat(serviceName, node);
    }
  }

};

}}}} // namespace

#endif

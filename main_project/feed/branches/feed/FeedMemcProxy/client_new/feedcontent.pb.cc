// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "feedcontent.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xce {
namespace feed {

namespace {

const ::google::protobuf::Descriptor* PbFeedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbFeedData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbFeedReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbFeedReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbFeedContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbFeedContent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_feedcontent_2eproto() {
  protobuf_AddDesc_feedcontent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "feedcontent.proto");
  GOOGLE_CHECK(file != NULL);
  PbFeedData_descriptor_ = file->message_type(0);
  static const int PbFeedData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, actor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, weight_),
  };
  PbFeedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbFeedData_descriptor_,
      PbFeedData::default_instance_,
      PbFeedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbFeedData));
  PbFeedReply_descriptor_ = file->message_type(1);
  static const int PbFeedReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedReply, oldreplyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedReply, oldreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedReply, newreplyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedReply, newreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedReply, count_),
  };
  PbFeedReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbFeedReply_descriptor_,
      PbFeedReply::default_instance_,
      PbFeedReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbFeedReply));
  PbFeedContent_descriptor_ = file->message_type(2);
  static const int PbFeedContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedContent, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedContent, reply_),
  };
  PbFeedContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbFeedContent_descriptor_,
      PbFeedContent::default_instance_,
      PbFeedContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbFeedContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbFeedContent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_feedcontent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbFeedData_descriptor_, &PbFeedData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbFeedReply_descriptor_, &PbFeedReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbFeedContent_descriptor_, &PbFeedContent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_feedcontent_2eproto() {
  delete PbFeedData::default_instance_;
  delete PbFeedData_reflection_;
  delete PbFeedReply::default_instance_;
  delete PbFeedReply_reflection_;
  delete PbFeedContent::default_instance_;
  delete PbFeedContent_reflection_;
}

void protobuf_AddDesc_feedcontent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021feedcontent.proto\022\010xce.feed\"r\n\nPbFeedD"
    "ata\022\014\n\004feed\030\001 \002(\003\022\016\n\006source\030\002 \002(\003\022\r\n\005act"
    "or\030\003 \002(\005\022\014\n\004type\030\004 \002(\005\022\013\n\003xml\030\007 \002(\t\022\014\n\004t"
    "ime\030\005 \002(\005\022\016\n\006weight\030\006 \002(\005\"h\n\013PbFeedReply"
    "\022\022\n\noldReplyId\030\001 \002(\003\022\020\n\010oldReply\030\004 \002(\t\022\022"
    "\n\nnewReplyId\030\002 \002(\003\022\020\n\010newReply\030\005 \002(\t\022\r\n\005"
    "count\030\003 \002(\005\"Y\n\rPbFeedContent\022\"\n\004data\030\001 \002"
    "(\0132\024.xce.feed.PbFeedData\022$\n\005reply\030\002 \002(\0132"
    "\025.xce.feed.PbFeedReply", 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "feedcontent.proto", &protobuf_RegisterTypes);
  PbFeedData::default_instance_ = new PbFeedData();
  PbFeedReply::default_instance_ = new PbFeedReply();
  PbFeedContent::default_instance_ = new PbFeedContent();
  PbFeedData::default_instance_->InitAsDefaultInstance();
  PbFeedReply::default_instance_->InitAsDefaultInstance();
  PbFeedContent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_feedcontent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_feedcontent_2eproto {
  StaticDescriptorInitializer_feedcontent_2eproto() {
    protobuf_AddDesc_feedcontent_2eproto();
  }
} static_descriptor_initializer_feedcontent_2eproto_;


// ===================================================================

const ::std::string PbFeedData::_default_xml_;
#ifndef _MSC_VER
const int PbFeedData::kFeedFieldNumber;
const int PbFeedData::kSourceFieldNumber;
const int PbFeedData::kActorFieldNumber;
const int PbFeedData::kTypeFieldNumber;
const int PbFeedData::kXmlFieldNumber;
const int PbFeedData::kTimeFieldNumber;
const int PbFeedData::kWeightFieldNumber;
#endif  // !_MSC_VER

PbFeedData::PbFeedData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbFeedData::InitAsDefaultInstance() {
}

PbFeedData::PbFeedData(const PbFeedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbFeedData::SharedCtor() {
  _cached_size_ = 0;
  feed_ = GOOGLE_LONGLONG(0);
  source_ = GOOGLE_LONGLONG(0);
  actor_ = 0;
  type_ = 0;
  xml_ = const_cast< ::std::string*>(&_default_xml_);
  time_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbFeedData::~PbFeedData() {
  SharedDtor();
}

void PbFeedData::SharedDtor() {
  if (xml_ != &_default_xml_) {
    delete xml_;
  }
  if (this != default_instance_) {
  }
}

void PbFeedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFeedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbFeedData_descriptor_;
}

const PbFeedData& PbFeedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_feedcontent_2eproto();  return *default_instance_;
}

PbFeedData* PbFeedData::default_instance_ = NULL;

PbFeedData* PbFeedData::New() const {
  return new PbFeedData;
}

void PbFeedData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    feed_ = GOOGLE_LONGLONG(0);
    source_ = GOOGLE_LONGLONG(0);
    actor_ = 0;
    type_ = 0;
    if (_has_bit(4)) {
      if (xml_ != &_default_xml_) {
        xml_->clear();
      }
    }
    time_ = 0;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbFeedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 feed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feed_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source;
        break;
      }
      
      // required int64 source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actor;
        break;
      }
      
      // required int32 actor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // required int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weight;
        break;
      }
      
      // required int32 weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_xml;
        break;
      }
      
      // required string xml = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xml().data(), this->xml().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbFeedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 feed = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->feed(), output);
  }
  
  // required int64 source = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->source(), output);
  }
  
  // required int32 actor = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor(), output);
  }
  
  // required int32 type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  // required int32 time = 5;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }
  
  // required int32 weight = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weight(), output);
  }
  
  // required string xml = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->xml(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbFeedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 feed = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->feed(), target);
  }
  
  // required int64 source = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->source(), target);
  }
  
  // required int32 actor = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor(), target);
  }
  
  // required int32 type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  // required int32 time = 5;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }
  
  // required int32 weight = 6;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->weight(), target);
  }
  
  // required string xml = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->xml(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbFeedData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 feed = 1;
    if (has_feed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feed());
    }
    
    // required int64 source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source());
    }
    
    // required int32 actor = 3;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor());
    }
    
    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string xml = 7;
    if (has_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xml());
    }
    
    // required int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 weight = 6;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFeedData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbFeedData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbFeedData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbFeedData::MergeFrom(const PbFeedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_feed(from.feed());
    }
    if (from._has_bit(1)) {
      set_source(from.source());
    }
    if (from._has_bit(2)) {
      set_actor(from.actor());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_xml(from.xml());
    }
    if (from._has_bit(5)) {
      set_time(from.time());
    }
    if (from._has_bit(6)) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbFeedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFeedData::CopyFrom(const PbFeedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFeedData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void PbFeedData::Swap(PbFeedData* other) {
  if (other != this) {
    std::swap(feed_, other->feed_);
    std::swap(source_, other->source_);
    std::swap(actor_, other->actor_);
    std::swap(type_, other->type_);
    std::swap(xml_, other->xml_);
    std::swap(time_, other->time_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbFeedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbFeedData_descriptor_;
  metadata.reflection = PbFeedData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PbFeedReply::_default_oldreply_;
const ::std::string PbFeedReply::_default_newreply_;
#ifndef _MSC_VER
const int PbFeedReply::kOldReplyIdFieldNumber;
const int PbFeedReply::kOldReplyFieldNumber;
const int PbFeedReply::kNewReplyIdFieldNumber;
const int PbFeedReply::kNewReplyFieldNumber;
const int PbFeedReply::kCountFieldNumber;
#endif  // !_MSC_VER

PbFeedReply::PbFeedReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbFeedReply::InitAsDefaultInstance() {
}

PbFeedReply::PbFeedReply(const PbFeedReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbFeedReply::SharedCtor() {
  _cached_size_ = 0;
  oldreplyid_ = GOOGLE_LONGLONG(0);
  oldreply_ = const_cast< ::std::string*>(&_default_oldreply_);
  newreplyid_ = GOOGLE_LONGLONG(0);
  newreply_ = const_cast< ::std::string*>(&_default_newreply_);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbFeedReply::~PbFeedReply() {
  SharedDtor();
}

void PbFeedReply::SharedDtor() {
  if (oldreply_ != &_default_oldreply_) {
    delete oldreply_;
  }
  if (newreply_ != &_default_newreply_) {
    delete newreply_;
  }
  if (this != default_instance_) {
  }
}

void PbFeedReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFeedReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbFeedReply_descriptor_;
}

const PbFeedReply& PbFeedReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_feedcontent_2eproto();  return *default_instance_;
}

PbFeedReply* PbFeedReply::default_instance_ = NULL;

PbFeedReply* PbFeedReply::New() const {
  return new PbFeedReply;
}

void PbFeedReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oldreplyid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (oldreply_ != &_default_oldreply_) {
        oldreply_->clear();
      }
    }
    newreplyid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (newreply_ != &_default_newreply_) {
        newreply_->clear();
      }
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbFeedReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 oldReplyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oldreplyid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newReplyId;
        break;
      }
      
      // required int64 newReplyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newReplyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newreplyid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldReply;
        break;
      }
      
      // required string oldReply = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldReply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldreply()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldreply().data(), this->oldreply().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_newReply;
        break;
      }
      
      // required string newReply = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newReply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newreply()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newreply().data(), this->newreply().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbFeedReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 oldReplyId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->oldreplyid(), output);
  }
  
  // required int64 newReplyId = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->newreplyid(), output);
  }
  
  // required int32 count = 3;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // required string oldReply = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldreply().data(), this->oldreply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->oldreply(), output);
  }
  
  // required string newReply = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newreply().data(), this->newreply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->newreply(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbFeedReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 oldReplyId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->oldreplyid(), target);
  }
  
  // required int64 newReplyId = 2;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->newreplyid(), target);
  }
  
  // required int32 count = 3;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  // required string oldReply = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldreply().data(), this->oldreply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oldreply(), target);
  }
  
  // required string newReply = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newreply().data(), this->newreply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newreply(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbFeedReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 oldReplyId = 1;
    if (has_oldreplyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oldreplyid());
    }
    
    // required string oldReply = 4;
    if (has_oldreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldreply());
    }
    
    // required int64 newReplyId = 2;
    if (has_newreplyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newreplyid());
    }
    
    // required string newReply = 5;
    if (has_newreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newreply());
    }
    
    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFeedReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbFeedReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbFeedReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbFeedReply::MergeFrom(const PbFeedReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oldreplyid(from.oldreplyid());
    }
    if (from._has_bit(1)) {
      set_oldreply(from.oldreply());
    }
    if (from._has_bit(2)) {
      set_newreplyid(from.newreplyid());
    }
    if (from._has_bit(3)) {
      set_newreply(from.newreply());
    }
    if (from._has_bit(4)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbFeedReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFeedReply::CopyFrom(const PbFeedReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFeedReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void PbFeedReply::Swap(PbFeedReply* other) {
  if (other != this) {
    std::swap(oldreplyid_, other->oldreplyid_);
    std::swap(oldreply_, other->oldreply_);
    std::swap(newreplyid_, other->newreplyid_);
    std::swap(newreply_, other->newreply_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbFeedReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbFeedReply_descriptor_;
  metadata.reflection = PbFeedReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbFeedContent::kDataFieldNumber;
const int PbFeedContent::kReplyFieldNumber;
#endif  // !_MSC_VER

PbFeedContent::PbFeedContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbFeedContent::InitAsDefaultInstance() {
  data_ = const_cast< ::xce::feed::PbFeedData*>(&::xce::feed::PbFeedData::default_instance());
  reply_ = const_cast< ::xce::feed::PbFeedReply*>(&::xce::feed::PbFeedReply::default_instance());
}

PbFeedContent::PbFeedContent(const PbFeedContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbFeedContent::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbFeedContent::~PbFeedContent() {
  SharedDtor();
}

void PbFeedContent::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete reply_;
  }
}

void PbFeedContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbFeedContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbFeedContent_descriptor_;
}

const PbFeedContent& PbFeedContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_feedcontent_2eproto();  return *default_instance_;
}

PbFeedContent* PbFeedContent::default_instance_ = NULL;

PbFeedContent* PbFeedContent::New() const {
  return new PbFeedContent;
}

void PbFeedContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (data_ != NULL) data_->::xce::feed::PbFeedData::Clear();
    }
    if (_has_bit(1)) {
      if (reply_ != NULL) reply_->::xce::feed::PbFeedReply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbFeedContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xce.feed.PbFeedData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reply;
        break;
      }
      
      // required .xce.feed.PbFeedReply reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbFeedContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xce.feed.PbFeedData data = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  // required .xce.feed.PbFeedReply reply = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reply(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbFeedContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xce.feed.PbFeedData data = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  // required .xce.feed.PbFeedReply reply = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reply(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbFeedContent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xce.feed.PbFeedData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // required .xce.feed.PbFeedReply reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reply());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbFeedContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbFeedContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbFeedContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbFeedContent::MergeFrom(const PbFeedContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_data()->::xce::feed::PbFeedData::MergeFrom(from.data());
    }
    if (from._has_bit(1)) {
      mutable_reply()->::xce::feed::PbFeedReply::MergeFrom(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbFeedContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFeedContent::CopyFrom(const PbFeedContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFeedContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_reply()) {
    if (!this->reply().IsInitialized()) return false;
  }
  return true;
}

void PbFeedContent::Swap(PbFeedContent* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbFeedContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbFeedContent_descriptor_;
  metadata.reflection = PbFeedContent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace feed
}  // namespace xce

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feedcontent.proto

#ifndef PROTOBUF_feedcontent_2eproto__INCLUDED
#define PROTOBUF_feedcontent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace xce {
namespace feed {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_feedcontent_2eproto();
void protobuf_AssignDesc_feedcontent_2eproto();
void protobuf_ShutdownFile_feedcontent_2eproto();

class PbFeedData;
class PbFeedReply;
class PbFeedContent;

// ===================================================================

class PbFeedData : public ::google::protobuf::Message {
 public:
  PbFeedData();
  virtual ~PbFeedData();
  
  PbFeedData(const PbFeedData& from);
  
  inline PbFeedData& operator=(const PbFeedData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbFeedData& default_instance();
  
  void Swap(PbFeedData* other);
  
  // implements Message ----------------------------------------------
  
  PbFeedData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbFeedData& from);
  void MergeFrom(const PbFeedData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 feed = 1;
  inline bool has_feed() const;
  inline void clear_feed();
  static const int kFeedFieldNumber = 1;
  inline ::google::protobuf::int64 feed() const;
  inline void set_feed(::google::protobuf::int64 value);
  
  // required int64 source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline ::google::protobuf::int64 source() const;
  inline void set_source(::google::protobuf::int64 value);
  
  // required int32 actor = 3;
  inline bool has_actor() const;
  inline void clear_actor();
  static const int kActorFieldNumber = 3;
  inline ::google::protobuf::int32 actor() const;
  inline void set_actor(::google::protobuf::int32 value);
  
  // required int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string xml = 7;
  inline bool has_xml() const;
  inline void clear_xml();
  static const int kXmlFieldNumber = 7;
  inline const ::std::string& xml() const;
  inline void set_xml(const ::std::string& value);
  inline void set_xml(const char* value);
  inline void set_xml(const char* value, size_t size);
  inline ::std::string* mutable_xml();
  
  // required int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 weight = 6;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 6;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:xce.feed.PbFeedData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 feed_;
  ::google::protobuf::int64 source_;
  ::google::protobuf::int32 actor_;
  ::google::protobuf::int32 type_;
  ::std::string* xml_;
  static const ::std::string _default_xml_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 weight_;
  friend void  protobuf_AddDesc_feedcontent_2eproto();
  friend void protobuf_AssignDesc_feedcontent_2eproto();
  friend void protobuf_ShutdownFile_feedcontent_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PbFeedData* default_instance_;
};
// -------------------------------------------------------------------

class PbFeedReply : public ::google::protobuf::Message {
 public:
  PbFeedReply();
  virtual ~PbFeedReply();
  
  PbFeedReply(const PbFeedReply& from);
  
  inline PbFeedReply& operator=(const PbFeedReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbFeedReply& default_instance();
  
  void Swap(PbFeedReply* other);
  
  // implements Message ----------------------------------------------
  
  PbFeedReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbFeedReply& from);
  void MergeFrom(const PbFeedReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 oldReplyId = 1;
  inline bool has_oldreplyid() const;
  inline void clear_oldreplyid();
  static const int kOldReplyIdFieldNumber = 1;
  inline ::google::protobuf::int64 oldreplyid() const;
  inline void set_oldreplyid(::google::protobuf::int64 value);
  
  // required string oldReply = 4;
  inline bool has_oldreply() const;
  inline void clear_oldreply();
  static const int kOldReplyFieldNumber = 4;
  inline const ::std::string& oldreply() const;
  inline void set_oldreply(const ::std::string& value);
  inline void set_oldreply(const char* value);
  inline void set_oldreply(const char* value, size_t size);
  inline ::std::string* mutable_oldreply();
  
  // required int64 newReplyId = 2;
  inline bool has_newreplyid() const;
  inline void clear_newreplyid();
  static const int kNewReplyIdFieldNumber = 2;
  inline ::google::protobuf::int64 newreplyid() const;
  inline void set_newreplyid(::google::protobuf::int64 value);
  
  // required string newReply = 5;
  inline bool has_newreply() const;
  inline void clear_newreply();
  static const int kNewReplyFieldNumber = 5;
  inline const ::std::string& newreply() const;
  inline void set_newreply(const ::std::string& value);
  inline void set_newreply(const char* value);
  inline void set_newreply(const char* value, size_t size);
  inline ::std::string* mutable_newreply();
  
  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:xce.feed.PbFeedReply)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 oldreplyid_;
  ::std::string* oldreply_;
  static const ::std::string _default_oldreply_;
  ::google::protobuf::int64 newreplyid_;
  ::std::string* newreply_;
  static const ::std::string _default_newreply_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_feedcontent_2eproto();
  friend void protobuf_AssignDesc_feedcontent_2eproto();
  friend void protobuf_ShutdownFile_feedcontent_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PbFeedReply* default_instance_;
};
// -------------------------------------------------------------------

class PbFeedContent : public ::google::protobuf::Message {
 public:
  PbFeedContent();
  virtual ~PbFeedContent();
  
  PbFeedContent(const PbFeedContent& from);
  
  inline PbFeedContent& operator=(const PbFeedContent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbFeedContent& default_instance();
  
  void Swap(PbFeedContent* other);
  
  // implements Message ----------------------------------------------
  
  PbFeedContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbFeedContent& from);
  void MergeFrom(const PbFeedContent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .xce.feed.PbFeedData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::xce::feed::PbFeedData& data() const;
  inline ::xce::feed::PbFeedData* mutable_data();
  
  // required .xce.feed.PbFeedReply reply = 2;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 2;
  inline const ::xce::feed::PbFeedReply& reply() const;
  inline ::xce::feed::PbFeedReply* mutable_reply();
  
  // @@protoc_insertion_point(class_scope:xce.feed.PbFeedContent)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::xce::feed::PbFeedData* data_;
  ::xce::feed::PbFeedReply* reply_;
  friend void  protobuf_AddDesc_feedcontent_2eproto();
  friend void protobuf_AssignDesc_feedcontent_2eproto();
  friend void protobuf_ShutdownFile_feedcontent_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PbFeedContent* default_instance_;
};
// ===================================================================


// ===================================================================

// PbFeedData

// required int64 feed = 1;
inline bool PbFeedData::has_feed() const {
  return _has_bit(0);
}
inline void PbFeedData::clear_feed() {
  feed_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 PbFeedData::feed() const {
  return feed_;
}
inline void PbFeedData::set_feed(::google::protobuf::int64 value) {
  _set_bit(0);
  feed_ = value;
}

// required int64 source = 2;
inline bool PbFeedData::has_source() const {
  return _has_bit(1);
}
inline void PbFeedData::clear_source() {
  source_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 PbFeedData::source() const {
  return source_;
}
inline void PbFeedData::set_source(::google::protobuf::int64 value) {
  _set_bit(1);
  source_ = value;
}

// required int32 actor = 3;
inline bool PbFeedData::has_actor() const {
  return _has_bit(2);
}
inline void PbFeedData::clear_actor() {
  actor_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 PbFeedData::actor() const {
  return actor_;
}
inline void PbFeedData::set_actor(::google::protobuf::int32 value) {
  _set_bit(2);
  actor_ = value;
}

// required int32 type = 4;
inline bool PbFeedData::has_type() const {
  return _has_bit(3);
}
inline void PbFeedData::clear_type() {
  type_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PbFeedData::type() const {
  return type_;
}
inline void PbFeedData::set_type(::google::protobuf::int32 value) {
  _set_bit(3);
  type_ = value;
}

// required string xml = 7;
inline bool PbFeedData::has_xml() const {
  return _has_bit(4);
}
inline void PbFeedData::clear_xml() {
  if (xml_ != &_default_xml_) {
    xml_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& PbFeedData::xml() const {
  return *xml_;
}
inline void PbFeedData::set_xml(const ::std::string& value) {
  _set_bit(4);
  if (xml_ == &_default_xml_) {
    xml_ = new ::std::string;
  }
  xml_->assign(value);
}
inline void PbFeedData::set_xml(const char* value) {
  _set_bit(4);
  if (xml_ == &_default_xml_) {
    xml_ = new ::std::string;
  }
  xml_->assign(value);
}
inline void PbFeedData::set_xml(const char* value, size_t size) {
  _set_bit(4);
  if (xml_ == &_default_xml_) {
    xml_ = new ::std::string;
  }
  xml_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbFeedData::mutable_xml() {
  _set_bit(4);
  if (xml_ == &_default_xml_) {
    xml_ = new ::std::string;
  }
  return xml_;
}

// required int32 time = 5;
inline bool PbFeedData::has_time() const {
  return _has_bit(5);
}
inline void PbFeedData::clear_time() {
  time_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 PbFeedData::time() const {
  return time_;
}
inline void PbFeedData::set_time(::google::protobuf::int32 value) {
  _set_bit(5);
  time_ = value;
}

// required int32 weight = 6;
inline bool PbFeedData::has_weight() const {
  return _has_bit(6);
}
inline void PbFeedData::clear_weight() {
  weight_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 PbFeedData::weight() const {
  return weight_;
}
inline void PbFeedData::set_weight(::google::protobuf::int32 value) {
  _set_bit(6);
  weight_ = value;
}

// -------------------------------------------------------------------

// PbFeedReply

// required int64 oldReplyId = 1;
inline bool PbFeedReply::has_oldreplyid() const {
  return _has_bit(0);
}
inline void PbFeedReply::clear_oldreplyid() {
  oldreplyid_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 PbFeedReply::oldreplyid() const {
  return oldreplyid_;
}
inline void PbFeedReply::set_oldreplyid(::google::protobuf::int64 value) {
  _set_bit(0);
  oldreplyid_ = value;
}

// required string oldReply = 4;
inline bool PbFeedReply::has_oldreply() const {
  return _has_bit(1);
}
inline void PbFeedReply::clear_oldreply() {
  if (oldreply_ != &_default_oldreply_) {
    oldreply_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PbFeedReply::oldreply() const {
  return *oldreply_;
}
inline void PbFeedReply::set_oldreply(const ::std::string& value) {
  _set_bit(1);
  if (oldreply_ == &_default_oldreply_) {
    oldreply_ = new ::std::string;
  }
  oldreply_->assign(value);
}
inline void PbFeedReply::set_oldreply(const char* value) {
  _set_bit(1);
  if (oldreply_ == &_default_oldreply_) {
    oldreply_ = new ::std::string;
  }
  oldreply_->assign(value);
}
inline void PbFeedReply::set_oldreply(const char* value, size_t size) {
  _set_bit(1);
  if (oldreply_ == &_default_oldreply_) {
    oldreply_ = new ::std::string;
  }
  oldreply_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbFeedReply::mutable_oldreply() {
  _set_bit(1);
  if (oldreply_ == &_default_oldreply_) {
    oldreply_ = new ::std::string;
  }
  return oldreply_;
}

// required int64 newReplyId = 2;
inline bool PbFeedReply::has_newreplyid() const {
  return _has_bit(2);
}
inline void PbFeedReply::clear_newreplyid() {
  newreplyid_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 PbFeedReply::newreplyid() const {
  return newreplyid_;
}
inline void PbFeedReply::set_newreplyid(::google::protobuf::int64 value) {
  _set_bit(2);
  newreplyid_ = value;
}

// required string newReply = 5;
inline bool PbFeedReply::has_newreply() const {
  return _has_bit(3);
}
inline void PbFeedReply::clear_newreply() {
  if (newreply_ != &_default_newreply_) {
    newreply_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& PbFeedReply::newreply() const {
  return *newreply_;
}
inline void PbFeedReply::set_newreply(const ::std::string& value) {
  _set_bit(3);
  if (newreply_ == &_default_newreply_) {
    newreply_ = new ::std::string;
  }
  newreply_->assign(value);
}
inline void PbFeedReply::set_newreply(const char* value) {
  _set_bit(3);
  if (newreply_ == &_default_newreply_) {
    newreply_ = new ::std::string;
  }
  newreply_->assign(value);
}
inline void PbFeedReply::set_newreply(const char* value, size_t size) {
  _set_bit(3);
  if (newreply_ == &_default_newreply_) {
    newreply_ = new ::std::string;
  }
  newreply_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbFeedReply::mutable_newreply() {
  _set_bit(3);
  if (newreply_ == &_default_newreply_) {
    newreply_ = new ::std::string;
  }
  return newreply_;
}

// required int32 count = 3;
inline bool PbFeedReply::has_count() const {
  return _has_bit(4);
}
inline void PbFeedReply::clear_count() {
  count_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 PbFeedReply::count() const {
  return count_;
}
inline void PbFeedReply::set_count(::google::protobuf::int32 value) {
  _set_bit(4);
  count_ = value;
}

// -------------------------------------------------------------------

// PbFeedContent

// required .xce.feed.PbFeedData data = 1;
inline bool PbFeedContent::has_data() const {
  return _has_bit(0);
}
inline void PbFeedContent::clear_data() {
  if (data_ != NULL) data_->::xce::feed::PbFeedData::Clear();
  _clear_bit(0);
}
inline const ::xce::feed::PbFeedData& PbFeedContent::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::xce::feed::PbFeedData* PbFeedContent::mutable_data() {
  _set_bit(0);
  if (data_ == NULL) data_ = new ::xce::feed::PbFeedData;
  return data_;
}

// required .xce.feed.PbFeedReply reply = 2;
inline bool PbFeedContent::has_reply() const {
  return _has_bit(1);
}
inline void PbFeedContent::clear_reply() {
  if (reply_ != NULL) reply_->::xce::feed::PbFeedReply::Clear();
  _clear_bit(1);
}
inline const ::xce::feed::PbFeedReply& PbFeedContent::reply() const {
  return reply_ != NULL ? *reply_ : *default_instance_->reply_;
}
inline ::xce::feed::PbFeedReply* PbFeedContent::mutable_reply() {
  _set_bit(1);
  if (reply_ == NULL) reply_ = new ::xce::feed::PbFeedReply;
  return reply_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace feed
}  // namespace xce

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_feedcontent_2eproto__INCLUDED
